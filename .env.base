#!/bin/env bash

# DB related params
export DBT_TARGET="snowflake"
export INPUT_SCHEMA_GITHUB="github_input_stage"
export INPUT_SCHEMA_FAA="faa_input_stage"
export INPUT_SCHEMA_ECOMMERCE_DEMO="ecommerce_demo_input_stage"
export INPUT_SCHEMA_DATA_SCIENCE="data_science_input_stage"
export INPUT_SCHEMA_EXCHANGERATEHOST="exchangeratehost_input_stage"
export OUTPUT_SCHEMA="cicd_output_stage"
# Snowflake specific
export DB_ACCOUNT="gooddata"
export DB_WAREHOUSE="DEMO_WH"

# Meltano
export MELTANO_TARGET="target-snowflake"
export MELTANO_STATE_AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY"
export MELTANO_STATE_AWS_SECRET_ACCESS_KEY="$AWS_SECRET_KEY"
export MELTANO_STATE_AWS_BUCKET="jacek-blueprint-data-pipeline"
unset MELTANO_STATE_AWS_ENDPOINT

# dbt
export DBT_PROFILES_DIR="profile"
# dbt cloud - test running a dbt cloud job
export DBT_ALLOWED_DEGRADATION=20
# Gitlab (for testing sending messages to merge requests)
export CI_MERGE_REQUEST_PROJECT_ID=37824613
export CI_MERGE_REQUEST_IID=1
# GitHub (for testing sending messages to pull requests)
# GitHub is preferred over Gitlab in Python SDK. Unset GitHub variables to test Gitlab.
export GITHUB_REPOSITORY="jaceksan/gooddata-data-pipeline"
export GITHUB_REF_NAME="24/merge"
export GITHUB_ACTOR="jaceksan"
# Set it to a commit SHA which you want to test in dbt Cloud
export GOODDATA_GITHUB_SHA=""

# GoodData
export GOODDATA_UPPER_CASE="--gooddata-upper-case"
# GoodData - deliver to 3 organizations - demo_cicd(Panther PROD), gartner_demo and gartner_demo_se(Panther closed beta)
export GOODDATA_PROFILES="demo_cicd closed_beta closed_beta_se"
